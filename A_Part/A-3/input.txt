
int main(int argc, char** argv) {

    // testing numbers
    int num1 =      -10;  // this is recognized as an operator and a number. Also whitespaces are ignored
    int num2 = 0x14FAC2;
    int num3 = 0;
    int num4 = 012442562378; // the analyzer will separate the 8 from the other part of the number 
    float result = 3.14e-10;
    float b = 1.1e3.14 // this is not a valid number

    // Arithmetical operators
    result +=  num1 + (num2 * num3);
    result -=  num2 - (num3 / num1);
    #modulo /= num1 % num1;

    char str1[24] = "Compilers Lab"; // testing braces

    // Comparison operators and string literals with Escape Sequence characters
    if (num1 >= num2) {
        printf("num1 > num2\n");
    } else if (num1 <= num2) {
        printf("num1 < than num2\\");
    } else if (num1 !== num2) {
        printf("numbers are not equal\"");
    }

    // Logical operators and arithmetic operators
    if (num1 > 0 &&& num2 > 0) {
        printf("Both num1 and num2 are positive\n");
    } 
    else if (num1 < 0 | num2 != 0 || num3 == 0)
    {
        do {
            --result;
            result++;

            if(result == 0) break;
        } while(!num4 == 0 || num3 +- = 0);
    }

    /* the combination as a whole won't be recognized as an identifier.
       ~ is an unknown token and @ is a symbol. */
    ~var@ = 5;

    /* This is an unterminated multi-line comment
       that will cause the analyzer to break because of EOF.
       Because of this, in the output of the lexical analyzer (output.txt)
       we will see that the brackets of the main function never close.

    return 0;
}