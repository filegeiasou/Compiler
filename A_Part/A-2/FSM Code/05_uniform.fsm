
// SZ is the startingn state that checks for the first input and
// transitions to the appropriate state accordingly.
// So we basically have this starting state, and depending on the starting value
// it transitions to the appropriate state that may have some code combined.

START=SZ
SZ:        A-Z a-z _           -> S0_IDENT   // transition to identifier code
           /                   -> S0_COMM_OP // transition to comments as well as the division operation 
           "                   -> S0_STR     // go to code regarding strings
           0                   -> S1_NUM
           1-9                 -> S2_NUM
           \* \= ! < >         -> S1_OP
           |                   -> S2_OP
           +                   -> S3_OP
           -                   -> S4_OP
           &                   -> S5_OP 
           %                   -> GOOD
           \n \s \t            -> SZ
           *                   -> BAD
// Identifiers
S0_IDENT:  a-z A-Z _ 0-9       -> S0_IDENT // if the start of the name is correct, check the rest of the identifer
           \n                  -> GOOD     // if it just starts with A-Z a-z or underscore (_) then it's accepted
           *                   -> BAD      // anything else is not valid

// For comments and operator /
S0_COMM_OP: /                   -> S1_COMM // single line comment (//)
            \*                  -> S2_COMM // multiple line comment start (/*)
            \= \n               -> GOOD    // just / or /= are accepted
            *                   -> BAD     // anything else is invalid

// State for signle line comment
S1_COMM:   *                   -> S1_COMM // any text inside the single line comment
           \n                  -> GOOD    // covers the case of an empty comment

// S2_COMM and S3_COMM states are about multi-line comments
S2_COMM:   *                   -> S2_COMM // any text inside the comment
           \*                  -> S3_COMM // if there is the asterisk symbol then it indicates that the comment might end

S3_COMM:   /                   -> GOOD    // in this case we have the combination */ which is a multi-line comment end
           *                   -> BAD     // anything else is not accepted

// For String literals
S0_STR:    *                   -> S1_STR 
           \\                  -> S2_STR
           "                   -> GOOD

S1_STR:    \\                  -> S2_STR
           "                   -> GOOD
           *                   -> S1_STR 

S2_STR:    \\ " n              -> S1_STR
           *                   -> BAD

// For numerical literals
S1_NUM:    .                   -> S3_NUM
           e E                 -> S4_NUM
           X x                 -> S6_NUM
           0-7                 -> S7_NUM
           \n                  -> GOOD
           *                   -> BAD

// Integer
S2_NUM:   0-9                  -> S2_NUM
          .                    -> S3_NUM
          e E                  -> S4_NUM
          \n	               -> GOOD
          *                    -> BAD

// Float
S3_NUM:   0-9                  -> S10_NUM
          *                    -> BAD

S10_NUM:  0-9                  -> S10_NUM
          e E                  -> S4_NUM
          \n                   -> GOOD
          *                    -> BAD

// Exponential
S4_NUM:   1-9                  -> S8_NUM
          -                    -> S5_NUM
          0                    -> GOOD
          *                    -> BAD

S5_NUM:   1-9                  -> S8_NUM
          *                    -> BAD 

// Hexadecimal
S6_NUM:   A-F 0-9              -> S9_NUM
          *                    -> BAD

S9_NUM:   A-F 0-9              -> S9_NUM
          \n                   -> GOOD
          *                    -> BAD

// Octal
S7_NUM:   0-7                  -> S7_NUM
          \n                   -> GOOD
          *                    -> BAD

S8_NUM:   0-9                  -> S8_NUM
          \n                   -> GOOD
           *                   -> BAD

// For operators
S1_OP:    \n \=                -> GOOD
           *                   -> BAD  

S2_OP:     |                   -> GOOD
           *                   -> BAD

S3_OP:     \n \+ \=            -> GOOD
           *                   -> BAD

S4_OP:     \n \- \=            -> GOOD
           *                   -> BAD

S5_OP:     \n &                -> GOOD
           *                   -> BAD
GOOD(OK): \n -> GOOD
